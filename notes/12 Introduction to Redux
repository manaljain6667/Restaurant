What is Redux?
• Predictable state container for JavaScript apps
• Inspired by Flux, Elm, Immutable (JavaScript)
• Makes state mutations predictable

Main Principles of Redux
• Single source of truth
  – Single state object tree within a single store
• State is read-only (only getters, no setters)
  – Changes should only be done through actions
• Changes are made with pure functions
  – Take previous state and action and return next state
  – No mutation of the previous state

What is Redux
• Single store and single state tree enables powerful techniques:
– Logging
– API handling
– Undo/redo
– State persistence
– “time-travel debugging”

Redux Concepts
• State: stored in plain JS object
• Action: plain JS object with a type field that specifies how to change something in the state
• Reducer: pure functions that take the current state and action and return a new state
– Update data immutably (do not modify inputs)

Redux Store
• Holds the current state value
• Created using createStore()
• Supplies three methods:
– dispatch(): states state update with the provided action object
– getState(): returns the current stored state value
– subscribe(): accepts a callback function that will be run every time an action is dispatched 

React with Redux
• Use the react-redux package for bindings between React and Redux
– connect(): generates a wrapper “container” component that subscribes to the store
– Surround your App root with <Provider>
• Takes the store as an attribute
• Makes store accessible to all connected components
• The connect() function takes two optional arguments:
– mapStateToProps(): called every time store state changes. Returns an object full of data with each field being a prop for the wrapped component
– mapDispatchToProps(): receives the dispatch() method and should return an object full of functions that use dispatch()

Redux Actions
• Actions: payloads of information that send data from your application to the store
  – Done through store.dispatch()
• Plain JS object that must have
  – A type property that indicates the type of action to be performed
• Best supported by defining action types as String constants
  – Rest of the object contains the data necessary for the action (payload)

To help us generate various actions, we make use of action creators:

Action Creators
• Functions that create actions
  – Encapsulate the process of creating the action objects
  – Return the action object
  – Resulting action object can be passed to the store through dispatch()

Within your store, you have Reducers that take in the action as one of the parameters, 
and then takes in the previous state or the current state of your application as the other parameter and that generates the used state.

Actions and Reducers
• Reducers should be able to take the previous state and action and return next state:
  – Do not mutate state
    - Make a copy and modify the copy before returning it
  – Actions typically handled through a switch statement switching on the action type
  – Return the previous state in the default case

Splitting and Combining Reducers
• Depending on the state shape, fields and updates to them could be decoupled:
– Split the reducer into simpler reducer functions that operate on only some of the fields
• Manages parts/slices of the global state
– Combine the simpler functions to generate the overall state